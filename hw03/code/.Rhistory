#change position to R factor
position_fac <- factor(position)
is.factor(position_fac)
?factor
table(position_fac)
plot(points,salary_mil_rd)
plot(points,salary_mil_rd,col=position_fac)
?par
plot(points,salary_mil_rd,col=position_fac, main = "Scatterplot of Points and Salary")
plot(points,salary_mil_rd,col=position_fac, main = "Scatterplot of Points and Salary", labels(["points","salary in millions"])
plot(points,salary_mil_rd,col=position_fac, main = "Scatterplot of Points and Salary", labels("points","salary in millions")
plot(points,salary_mil_rd,col=position_fac, main = "Scatterplot of Points and Salary", labels("points","salary in millions")
plot(points,salary_mil_rd,col=position_fac, main = "Scatterplot of Points and Salary", labels("points","salary in millions"))
plot(points,salary_mil_rd,col=position_fac, main = "Scatterplot of Points and Salary")
knitr::opts_chunk$set(echo = TRUE)
url <- "http://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data"
abalone <- read.table(url, sep = ",")
#pass data url to function
url <- "http://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data"
abalone <- read.table(url, sep = ",")
# download copy
origin <- 'http://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data'
origin <- 'http://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data'
destination <- 'abalone.data'
download.file(origin, destination)
abalone <- read.table("abalone.data", sep = ",")
head(abalone)
tail(abalone)
?read.table
str(abalone, vec.len = 1)
head(abalone)
# take a peek of first rows
head(abalone)
# take a peek of last rows
tail(abalone)
# check data frame's structure
str(abalone, vec.len = 1)
col_names <- c(
'sex',
'length',
'diameter',
'height',
'whole_weight',
'shucked_weight',
'viscera_weight',
'shell_weight',
'rings'
)
col_types <- c(
'factor',
'numeric',
'numeric',
'numeric',
'numeric',
'numeric',
'numeric',
'numeric',
'integer'
)
col_names <- c(
'sex',
'length',
'diameter',
'height',
'whole_weight',
'shucked_weight',
'viscera_weight',
'shell_weight',
'rings'
)
col_types <- c(
'factor',
'numeric',
'numeric',
'numeric',
'numeric',
'numeric',
'numeric',
'numeric',
'integer'
)
abalone <- read.table(
'abalone.data',
col.names = col_names,
colClasses = col_types,
sep = ","
)
knitr::opts_chunk$set(echo = TRUE)
#pass data url to function
url <- "http://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data"
abalone <- read.table(url, sep = ",")
# download copy
origin <- 'http://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data'
destination <- 'abalone.data'
download.file(origin, destination)
# reading data from your working directory
abalone <- read.table("abalone.data", sep = ",")
# take a peek of first rows
head(abalone)
# take a peek of last rows
tail(abalone)
# check data frame's structure
str(abalone, vec.len = 1)
col_names <- c(
'sex',
'length',
'diameter',
'height',
'whole_weight',
'shucked_weight',
'viscera_weight',
'shell_weight',
'rings'
)
col_types <- c(
'factor',
'numeric',
'numeric',
'numeric',
'numeric',
'numeric',
'numeric',
'numeric',
'integer'
)
abalone <- read.table(
'abalone.data',
col.names = col_names,
colClasses = col_types,
sep = ","
)
# check its structure again
str(abalone, vec.len = 1)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
install.packages(c("dplyr", "ggplot2"))
install.packages(c("dplyr", "ggplot2"))
knitr::opts_chunk$set(echo = TRUE)
#load packages
library(dplyr)
library(ggplot2)
github <- "https://github.com/ucb-stat133/stat133-fall-2017/raw/master/"
csv <- "data/nba2017-players.csv"
download.file(url = paste0(github, csv), destfile = 'nba2017-players.csv')
dat <- read.csv('nba2017-players.csv', stringsAsFactors = FALSE)
dat <- read.csv('nba2017-players.csv', stringsAsFactors = FALSE)
# first three rows
three_rows <- slice(dat, 1:3)
three_rows
gt_85
# subset rows given a condition
# (height greater than 85 inches)
gt_85 <- filter(dat, height > 85)
gt_85
row_by10 <- slice(dat, 10, by=10)
install.packages(c("dplyr", "ggplot2"))
?slice
row_by10 <- slice(dat, 10:5(10))
row_by10 <- slice(dat, 10)
row_by10 <- slice(dat, c(10,20,30)
row_by10 <- slice(dat, c(10,20,30))
row_by10 <- slice(dat, 10)
knitr::opts_chunk$set(echo = TRUE)
#importing using read.csv
cls = c("character","character","factor","character","double")
t = rep("integer",19)
cls = c(cls,t)
dat <- read.csv('nba2017-player-statistics.csv', stringsAsFactors = FALSE, colClasses = cls)
str(dat)
head(dat)
typeof(dat$Salary)
class(dat$Position)
class(dat$Experience)
#imporiting using read_cvs
library(readr)
dat1 <- read_csv('nba2017-player-statistics.csv', col_types = col( .default = col_integer(),
Player = col_character(),
Team = col_character(),
Position = col_factor(),
Experience = col_character(),
Salary = col_double()))
knitr::opts_chunk$set(echo = TRUE)
#importing using read.csv
cls = c("character","character","factor","character","double")
t = rep("integer",19)
cls = c(cls,t)
dat <- read.csv('nba2017-player-statistics.csv', stringsAsFactors = FALSE, colClasses = cls)
str(dat)
head(dat)
typeof(dat$Salary)
class(dat$Position)
class(dat$Experience)
#imporiting using read_cvs
library(readr)
dat1 <- read_csv('nba2017-player-statistics.csv', col_types = col( .default = col_integer(),
Player = col_character(),
Team = col_character(),
Position = col_factor(),
Experience = col_character(),
Salary = col_double()))
#convert R to 0 in Experience
typeof(dat$Experience)
dat$Experience[dat$Experience == "R"] <- 0
dat$Experience <- as.integer(dat$Experience)
typeof(dat$Experience)
#Create variables needed for EFF
dat$Missed_FG <- dat$FGA-dat$FGM
dat$Missed_FT <- dat$FTA-dat$FTM
dat$PTS <- (dat$Points2 * 2)+(dat$Points3 * 3)+dat$FTM
dat$REB <- dat$OREB + dat$DREB
dat$MPG <- dat$MIN/dat$GP
head(dat,5)
#Calculate EFF
dat$EFF <- (dat$PTS + dat$REB + dat$AST + dat$STL + dat$BLK - dat$Missed_FG - dat$Missed_FT - dat$TO)/dat$GP
head(dat,5)
summary(dat$EFF)
hist(dat$EFF, main='Histogram of Efficiency(EFF)', xlab='EFF')
#display info of top-10 players by EFF in decreasing order in data frame
top_10 <- dat[order(dat$EFF,decreasing=TRUE),]
top_10 <- head(top_10,10)
top_10
#Names of Players with negative EFF
dat[dat$EFF<0,1]
#compute correlation coefficients between EFF and other variables
?cor
cor(dat$EFF, dat$PTS)
cor(dat$EFF,dat$TO)
cor(dat$EFF,dat$Missed_FG)
#display info of top-10 players by EFF in decreasing order in data frame
top_10 <- dat[order(dat$EFF,decreasing=TRUE),]
top_10 <- head(top_10,10)
top_10
#Names of Players with negative EFF
dat[dat$EFF<0,1]
#compute correlation coefficients between EFF and other variables
a<-cor(dat$EFF, dat$PTS)
b<-cor(dat$EFF, dat$REB)
c<-cor(dat$EFF, dat$AST)
d<-cor(dat$EFF, dat$STL)
e<-cor(dat$EFF,dat$BLK)
f<-cor(dat$EFF,dat$Missed_FG)
g<-cor(dat$EFF,dat$Missed_FT)
h<-cor(dat$EFF,dat$TO)
i<-cor(dat$EFF,dat$GP)
#Display cc in descending order
data.frame(PTS = a,
REB =b,
AST=c,
STL =d,
BLK=e,
Missed_FG=f,
Missed_FT=g,
TO=h,
GP=i)
Cor_Coe
Cor_Coe <- c(a,b,c,d,e,f,g,h,i)
Cor_Coe
data.frame(Correlation_Coefficient = Cor_Coe)
#display info of top-10 players by EFF in decreasing order in data frame
top_10 <- dat[order(dat$EFF,decreasing=TRUE),]
top_10 <- head(top_10,10)
top_10
#Names of Players with negative EFF
dat[dat$EFF<0,1]
#compute correlation coefficients between EFF and other variables
a<-cor(dat$EFF, dat$PTS)
b<-cor(dat$EFF, dat$REB)
c<-cor(dat$EFF, dat$AST)
d<-cor(dat$EFF, dat$STL)
e<-cor(dat$EFF,dat$BLK)
f<-cor(dat$EFF,dat$Missed_FG)
g<-cor(dat$EFF,dat$Missed_FT)
h<-cor(dat$EFF,dat$TO)
i<-cor(dat$EFF,dat$GP)
#Display cc in descending order
Cor_Coe <- c(a,b,c,d,e,f,g,h,i)
variables <- c(PTS,REB,AST,STL,BLK,Missed_FG,Missed_FT,TO,GP)
variables <- c('PTS','REB','AST','STL','BLK','Missed_FG','Missed_FT','TO','GP')
data.frame(Variable_with_EFF = variables,
Correlation_Coefficient = Cor_Coe)
R <- data.frame(Variable_with_EFF = variables,
Correlation_Coefficient = Cor_Coe)
R
order(R,decreasing = TRUE)
R[order(R$Cor_Coe,decreasing = TRUE),)
R[order(R$Cor_Coe,decreasing = TRUE),]
R$Cor_Coe
#display info of top-10 players by EFF in decreasing order in data frame
top_10 <- dat[order(dat$EFF,decreasing=TRUE),]
top_10 <- head(top_10,10)
top_10
#Names of Players with negative EFF
dat[dat$EFF<0,1]
#compute correlation coefficients between EFF and other variables
a<-cor(dat$EFF, dat$PTS)
b<-cor(dat$EFF, dat$REB)
c<-cor(dat$EFF, dat$AST)
d<-cor(dat$EFF, dat$STL)
e<-cor(dat$EFF,dat$BLK)
f<-cor(dat$EFF,dat$Missed_FG)
g<-cor(dat$EFF,dat$Missed_FT)
h<-cor(dat$EFF,dat$TO)
i<-cor(dat$EFF,dat$GP)
#Display cc in descending order
Cor_Coe <- c(a,b,c,d,e,f,g,h,i)
variables <- c('PTS','REB','AST','STL','BLK','Missed_FG','Missed_FT','TO','GP')
R <- data.frame(Variable_with_EFF = variables,
Correlation_Coefficient = Cor_Coe)
R[order(R$Cor_Coe,decreasing = TRUE),]
R[order(R$Correlation_Coefficient,decreasing = TRUE),]
#display info of top-10 players by EFF in decreasing order in data frame
top_10 <- dat[order(dat$EFF,decreasing=TRUE),]
top_10 <- head(top_10,10)
top_10
#Names of Players with negative EFF
dat[dat$EFF<0,1]
#compute correlation coefficients between EFF and other variables
a<-cor(dat$EFF, dat$PTS)
b<-cor(dat$EFF, dat$REB)
c<-cor(dat$EFF, dat$AST)
d<-cor(dat$EFF, dat$STL)
e<-cor(dat$EFF,dat$BLK)
f<-cor(dat$EFF,dat$Missed_FG)*(-1)
g<-cor(dat$EFF,dat$Missed_FT)*(-1)
h<-cor(dat$EFF,dat$TO)*(-1)
i<-cor(dat$EFF,dat$GP)
#Display cc in descending order
Cor_Coe <- c(a,b,c,d,e,f,g,h,i)
variables <- c('PTS','REB','AST','STL','BLK','Missed_FG','Missed_FT','TO','GP')
R <- data.frame(Variable_with_EFF = variables,
Correlation_Coefficient = Cor_Coe)
R[order(R$Correlation_Coefficient,decreasing = TRUE),]
#barchart
barplot()
?barplot
barplot(Cor_Coe,variables)
library(printr)
knitr::opts_chunk$set(echo = TRUE)
library(printr)
library(readr)
#convert R to 0 in Experience
typeof(dat$Experience)
dat$Experience[dat$Experience == "R"] <- 0
dat$Experience <- as.integer(dat$Experience)
typeof(dat$Experience)
#convert R to 0 in Experience
typeof(dat$Experience)
dat$Experience[dat$Experience == "R"] <- 0
dat$Experience <- as.integer(dat$Experience)
typeof(dat$Experience)
#Create variables needed for EFF
dat$Missed_FG <- dat$FGA-dat$FGM
dat$Missed_FT <- dat$FTA-dat$FTM
dat$PTS <- (dat$Points2 * 2)+(dat$Points3 * 3)+dat$FTM
dat$REB <- dat$OREB + dat$DREB
dat$MPG <- dat$MIN/dat$GP
head(dat,5)
typeof(dat$Experience)
#Create variables needed for EFF
dat$Missed_FG <- dat$FGA-dat$FGM
dat$Missed_FT <- dat$FTA-dat$FTM
dat$PTS <- (dat$Points2 * 2)+(dat$Points3 * 3)+dat$FTM
dat$REB <- dat$OREB + dat$DREB
dat$MPG <- dat$MIN/dat$GP
head(dat,5)
head(dat,5)
#importing using read.csv
cls = c("character","character","factor","character","double")
t = rep("integer",19)
cls = c(cls,t)
dat <- read.csv('nba2017-player-statistics.csv', stringsAsFactors = FALSE, colClasses = cls)
str(dat)
head(dat)
typeof(dat$Salary)
class(dat$Position)
class(dat$Experience)
knitr::opts_chunk$set(echo = TRUE)
library(printr)
library(readr)
#imporiting using read_cvs
dat1 <- read_csv('nba2017-player-statistics.csv')
str(dat1)
#convert R to 0 in Experience
typeof(dat$Experience)
dat$Experience[dat$Experience == "R"] <- 0
dat$Experience <- as.integer(dat$Experience)
typeof(dat$Experience)
#Create variables needed for EFF
dat$Missed_FG <- dat$FGA-dat$FGM
dat$Missed_FT <- dat$FTA-dat$FTM
dat$PTS <- (dat$Points2 * 2)+(dat$Points3 * 3)+dat$FTM
dat$REB <- dat$OREB + dat$DREB
dat$MPG <- dat$MIN/dat$GP
head(dat,5)
#Calculate EFF
dat$EFF <- (dat$PTS + dat$REB + dat$AST + dat$STL + dat$BLK - dat$Missed_FG - dat$Missed_FT - dat$TO)/dat$GP
head(dat,5)
summary(dat$EFF)
hist(dat$EFF, main='Histogram of Efficiency(EFF)', xlab='EFF')
x = 6
x > 5
# Description:
#   This script prepares data to be used
# in the ranking analysis
# Input(s): data file 'nba2017-roster.csv','nba2017-stats.csv'
# Output(s): data file 'hw03-josia-yuan.Rmd'
# Author: Josia Yuan
# Date: 10-06-2017
# ===================================================================
library(readr)
library(dplyr)
library(ggplot2)
#Add new Variables
ros<-read.csv('../data/nba2017-roster.csv')
sta<-read.csv('../data/nba2017-stats.csv')
sta<-mutate(sta,missed_fg=field_goals_atts-field_goals_made)
sta<-mutate(sta,missed_ft=points1_atts-points1_made)
sta<-mutate(sta,points=3*points3_made + 2*points2_made + points1_made)
sta<-mutate(sta,rebounds=off_rebounds+def_rebounds)
sta<-mutate(sta,efficiency=(points+rebounds+assists+steals+blocks-missed_fg-missed_ft-turnovers)/games_played)
sink(file='../output/efficiency-summary.txt')
summary(sta$efficiency)
sink()
#Merging data
dat<-merge(sta,ros)
dat$team<-as.character(dat$team)
#Creating nba2017-teams.csv
team_data<-dat %>% group_by(team) %>% summarise(experience=round(mean(experience),digits=2),
salary=round(sum(salary/1000000),digits=2),
points3=sum(points3_made),
points2=sum(points2_made),
free_throws=sum(points1_made),
points=sum(3*points3_made+2*points2_made+points1_made),
off_rebounds=sum(off_rebounds),
def_rebounds=sum(def_rebounds),
assists=sum(assists),
steals=sum(steals),
blocks=sum(blocks),
turnovers=sum(turnovers),
fouls=sum(fouls),
efficiency=sum(efficiency))
summary(team_data)
class(dat$team)
sink(file = '../output/teams-summary.txt')
summary(team_data)
sink()
write.csv(team_data,file = '../data/nba2017-teams.csv')
#Graphics
stars(team_data[,-1],labels=team_data$team)
pdf(file='../images/teams_star_plot.pdf')
stars(team_data[,-1],labels=team_data$team)
dev.off()
ggplot(data=team_data,aes(x=experience,y=salary))+geom_point()+geom_label(aes(label=team_data$team))
pdf(file='../images/experience_salary.pdf')
ggplot(data=team_data,aes(x=experience,y=salary))+geom_point()+geom_label(aes(label=team_data$team))
dev.off()
setwd("C:/Users/user/Desktop/stat133/stat133-hws-fall17/hw03/code")
# Description:
#   This script prepares data to be used
# in the ranking analysis
# Input(s): data file 'nba2017-roster.csv','nba2017-stats.csv'
# Output(s): data file 'hw03-josia-yuan.Rmd'
# Author: Josia Yuan
# Date: 10-06-2017
# ===================================================================
library(readr)
library(dplyr)
library(ggplot2)
#Add new Variables
ros<-read.csv('../data/nba2017-roster.csv')
sta<-read.csv('../data/nba2017-stats.csv')
sta<-mutate(sta,missed_fg=field_goals_atts-field_goals_made)
sta<-mutate(sta,missed_ft=points1_atts-points1_made)
sta<-mutate(sta,points=3*points3_made + 2*points2_made + points1_made)
sta<-mutate(sta,rebounds=off_rebounds+def_rebounds)
sta<-mutate(sta,efficiency=(points+rebounds+assists+steals+blocks-missed_fg-missed_ft-turnovers)/games_played)
sink(file='../output/efficiency-summary.txt')
summary(sta$efficiency)
sink()
#Merging data
dat<-merge(sta,ros)
dat$team<-as.character(dat$team)
#Creating nba2017-teams.csv
team_data<-dat %>% group_by(team) %>% summarise(experience=round(mean(experience),digits=2),
salary=round(sum(salary/1000000),digits=2),
points3=sum(points3_made),
points2=sum(points2_made),
free_throws=sum(points1_made),
points=sum(3*points3_made+2*points2_made+points1_made),
off_rebounds=sum(off_rebounds),
def_rebounds=sum(def_rebounds),
assists=sum(assists),
steals=sum(steals),
blocks=sum(blocks),
turnovers=sum(turnovers),
fouls=sum(fouls),
efficiency=sum(efficiency))
summary(team_data)
class(dat$team)
sink(file = '../output/teams-summary.txt')
summary(team_data)
sink()
write.csv(team_data,file = '../data/nba2017-teams.csv')
#Graphics
stars(team_data[,-1],labels=team_data$team)
pdf(file='../images/teams_star_plot.pdf')
stars(team_data[,-1],labels=team_data$team)
dev.off()
ggplot(data=team_data,aes(x=experience,y=salary))+geom_point()+geom_label(aes(label=team_data$team))
pdf(file='../images/experience_salary.pdf')
ggplot(data=team_data,aes(x=experience,y=salary))+geom_point()+geom_label(aes(label=team_data$team))
dev.off()
