stop("can't do it with missing value")
}
}
get_quartile3(a)
#' @title Count_missing
#' @description calculates the number of missing values NA
#' @param x a numeric vector
#' @return the number of missing values NA
count_missing <- function(x){
which <- which(is.na(x))
return(length(which))
}
count_missing(a)
#' @title summary_states()
#' @description returns a list of summary statistics
#' @param x a numeric vector
#' @return a list of summary statistics
summary_stats<-function(x){
list <- list(
minimum = get_minimum(x),
percent10 = get_percentile10(x),
quartile1 = get_quartile1(x),
median = get_median(x),
mean = get_averge(x),
quartile3 = get_quartile3(x),
percent90 = get_percentile90(x),
maximum = get_maximum(x),
range = get_range(x),
stdev = get_stdev(x),
missing = count_missing(x))
return(list)
}
summary_stats(a)
#' @title print_stats
#' @description prints the values in a nice format
#' @param x a list of summary statistics
#' @return the values in a nice format
num <- function(x){ number <- c(get_minimum(x),
get_percentile10(x),
get_quartile1(x),
get_median(x),
get_averge(x),
get_quartile3(x),
get_percentile90(x),
get_maximum(x),
get_range(x),
get_stdev(x),
count_missing(x))
return(number)
}
print_stats <- function(x){
num(x)
names_sum <- names(summary_stats(x))
Num <- num(x)
first <- format(names_sum,width = 9,justify = "left")
second <- sprintf("%.4f",Num)
names(second)<-NULL
third <- paste(first,": ",second,sep = "")
cat(third,sep = "\n")
}
print_stats(a)
#' @title rescale100
#' @description compute a rescaled vector with a potential scale from 0 to 100
#' @param x a numeric vector
#' @param xmin a numeric value
#' @param xmax a numeric value
#' @return  a rescaled vector with a potential scale from 0 to 100
rescale100 <- function(x,xmin,xmax){
z <- 100*((x-xmin)/(xmax-xmin))
return(z)
}
b <- c(18,15,16,4,17,9)
rescale100(b,xmin=0,xmax=20)
#' @title drop_lowest
#' @description drop the lowest value
#' @param x a numeric vector of length n
#' @return a vector of length n ??? 1 without the lowest value
drop_lowest <- function(x){
x <- sort(x)
x <- x[-1]
return(x)
}
b <- c(10, 10, 8.5, 4, 7, 9)
drop_lowest(b)
#' @title score_homework()
#' @description: compute a single homework average
#' @param x a numeric vector of homework scores (of length n)
#' @param drop an optional logical argument
#' @return  a single homework average
score_homework <- function(x,drop=TRUE){
if(drop==TRUE){
x <- drop_lowest(x)
average <- get_averge(x)
return(average)
}else{average <- get_averge(x)
return(average)}
}
hws <- c(100, 80, 30, 70, 75, 85)
score_homework(hws, drop = TRUE)
score_homework(hws, drop = FALSE)
#' @title score_quiz
#' @description compute a single quiz average
#' @param x a numeric vector of quiz scores (of length n)
#' @param drop an optional logical argument
#' @return a single quiz average
score_quiz <- function(x,drop=TRUE){
if(drop==TRUE){
x <- drop_lowest(x)
Average <- get_averge(x)
return(Average)
}else{Average <- get_averge(x)
return(Average)}
}
quizzes <- c(100, 80, 70, 0)
score_quiz(quizzes, drop = TRUE)
score_quiz(quizzes, drop = FALSE)
#' @title score_lab()
#' @description compute the lab score
#' @param x a numeric value of lab attendance
#' @return  a single attendance value ranges between 0 and 12
score_lab <- function(x){
if(x==11){print(100)}
else if(x==12){print(100)}
else if(x==10){print(80)}
else if(x==9){print(60)}
else if(x==8){print(40)}
else if(x==7){print(20)}
else if(x<=6){print(0)}
}
score_lab(12)
score_lab(10)
score_lab(6)
script prepares data to be used
# in hw04
# Input(s): data file 'rawscores.csv'
# Output(s): data file 'hw04-josia-yuan.Rmd'
# Author: Josia Yuan
# Date: 11-11-2017
# ===================================================================
#load packages
library(readr)
library(dplyr)
source("functions.R")
#read rawscores.csv
raw<-read.csv('../data/rawdata/rawscores.csv',stringsAsFactors = FALSE)
head(raw)
sink(file='../output/summary-rawscores.txt')
str(raw)
sink()
for(i in 1:16){
sink('../output/summary-rawscores.txt',append = TRUE)
print(summary_stats(raw[,i]))
print(print_stats(raw[,i]))
sink()
}
#replace NA with 0
for (i in 1:nrow(raw)) {
for (j in 1:ncol(raw)) {
if (is.na(raw[i,j]) == TRUE) raw[i,j] <- 0
}
}
raw <- raw
#clean data
#rescale Quiz
raw$QZ1 <- rescale100(raw$QZ1,xmin = 0,xmax = 12)
raw$QZ2 <- rescale100(raw$QZ2,xmin = 0,xmax = 18)
raw$QZ3 <- rescale100(raw$QZ3,xmin = 0,xmax = 20)
raw$QZ4 <- rescale100(raw$QZ4,xmin = 0,xmax = 20)
#rescale to add variable
raw <- mutate(raw,Test1=rescale100(raw$EX1,xmin=0,xmax = 80))
raw <- mutate(raw,Test2=rescale100(raw$EX2,xmin=0,xmax = 90))
#Add Homework
hw <- raw[1:334,1:9]
colnames(hw) <- NULL
hw <- as.matrix(hw)
Homework <- c()
for(i in 1:334){
Homework <- c(Homework,score_homework(hw[i,]))
}
raw <- mutate(raw, Homework=Homework)
#Add Quiz
qiz <- raw[1:334,11:14]
colnames(qiz) <- NULL
qiz <- as.matrix(qiz)
Quiz <- c()
for(i in 1:334){
Quiz <- c(Quiz,score_quiz(qiz[i,]))
}
raw <- mutate(raw, Quiz=Quiz)
#Add Lab
Att <- raw[1:334,10]
colnames(Att) <- NULL
Att <- as.matrix(Att)
Lab <- c()
for(i in 1:334){
Lab <- c(Lab,score_lab(Att[i,]))
}
raw <- mutate(raw, Lab=Lab)
#Add Overall
head(raw)
Overall <- Lab*0.1+0.3*Homework+0.15*Quiz+0.2*raw$Test1+0.25*raw$Test2
raw <- mutate(raw, Overall=Overall)
head(raw)
#Add Grade
raw <- mutate(raw,Grade=c(1:334))
raw$Grade[raw$Overall<50&raw$Overall>=0]<-'F'
raw$Grade[raw$Overall<60&raw$Overall>=50]<-'D'
raw$Grade[raw$Overall<70&raw$Overall>=60]<-'C-'
raw$Grade[raw$Overall<77.5&raw$Overall>=70]<-'C'
raw$Grade[raw$Overall<79.5&raw$Overall>=77.5]<-'C+'
raw$Grade[raw$Overall<82&raw$Overall>=79.5]<-'B-'
raw$Grade[raw$Overall<86&raw$Overall>=82]<-'B'
raw$Grade[raw$Overall<88&raw$Overall>=86]<-'B+'
raw$Grade[raw$Overall<90&raw$Overall>=88]<-'A-'
raw$Grade[raw$Overall<95&raw$Overall>=90]<-'A'
raw$Grade[raw$Overall<=100&raw$Overall>=95]<-'A+'
head(raw)
#Export structure
sink(file='../output/summary-cleanscores.txt')
str(raw)
sink()
#Export summary
needed_data <- raw[,17:22]
filenames<-c("Test1-stats.txt",
"Test2-stats.txt",
"Homework-stats.txt",
"Quiz-stats.txt",
"Lab-stats.txt",
"Overall-stats.txt")
for(i in 1:6){
sink(file = paste("../output/",filenames[i]))
print(summary_stats(needed_data[,i]))
print(print_stats(needed_data[,i]))
sink()
}
#Export clean data frame
write.csv(raw,file='../data/cleandata/cleanscores.csv')
knitr::opts_chunk$set(echo = TRUE)
table(raw$Grade)
library(readr)
library(dplyr)
source("functions.R")
setwd("C:/Users/user/Desktop/stat133/stat133-hws-fall17/hw04/code")
setwd("C:/Users/user/Desktop/stat133/stat133-hws-fall17/hw04/code")
scription:
#   This script prepares data to be used
# in hw04
# Input(s): data file 'rawscores.csv'
# Output(s): data file 'hw04-josia-yuan.Rmd'
# Author: Josia Yuan
# Date: 11-11-2017
# ===================================================================
#load packages
library(readr)
library(dplyr)
source("functions.R")
#read rawscores.csv
raw<-read.csv('../data/rawdata/rawscores.csv',stringsAsFactors = FALSE)
head(raw)
sink(file='../output/summary-rawscores.txt')
str(raw)
sink()
for(i in 1:16){
sink('../output/summary-rawscores.txt',append = TRUE)
print(summary_stats(raw[,i]))
print(print_stats(raw[,i]))
sink()
}
#replace NA with 0
for (i in 1:nrow(raw)) {
for (j in 1:ncol(raw)) {
if (is.na(raw[i,j]) == TRUE) raw[i,j] <- 0
}
}
raw <- raw
#clean data
#rescale Quiz
raw$QZ1 <- rescale100(raw$QZ1,xmin = 0,xmax = 12)
raw$QZ2 <- rescale100(raw$QZ2,xmin = 0,xmax = 18)
raw$QZ3 <- rescale100(raw$QZ3,xmin = 0,xmax = 20)
raw$QZ4 <- rescale100(raw$QZ4,xmin = 0,xmax = 20)
#rescale to add variable
raw <- mutate(raw,Test1=rescale100(raw$EX1,xmin=0,xmax = 80))
raw <- mutate(raw,Test2=rescale100(raw$EX2,xmin=0,xmax = 90))
#Add Homework
hw <- raw[1:334,1:9]
colnames(hw) <- NULL
hw <- as.matrix(hw)
Homework <- c()
for(i in 1:334){
Homework <- c(Homework,score_homework(hw[i,]))
}
raw <- mutate(raw, Homework=Homework)
#Add Quiz
qiz <- raw[1:334,11:14]
colnames(qiz) <- NULL
qiz <- as.matrix(qiz)
Quiz <- c()
for(i in 1:334){
Quiz <- c(Quiz,score_quiz(qiz[i,]))
}
raw <- mutate(raw, Quiz=Quiz)
#Add Lab
Att <- raw[1:334,10]
colnames(Att) <- NULL
Att <- as.matrix(Att)
Lab <- c()
for(i in 1:334){
Lab <- c(Lab,score_lab(Att[i,]))
}
raw <- mutate(raw, Lab=Lab)
#Add Overall
head(raw)
Overall <- Lab*0.1+0.3*Homework+0.15*Quiz+0.2*raw$Test1+0.25*raw$Test2
raw <- mutate(raw, Overall=Overall)
head(raw)
#Add Grade
raw <- mutate(raw,Grade=c(1:334))
raw$Grade[raw$Overall<50&raw$Overall>=0]<-'F'
raw$Grade[raw$Overall<60&raw$Overall>=50]<-'D'
raw$Grade[raw$Overall<70&raw$Overall>=60]<-'C-'
raw$Grade[raw$Overall<77.5&raw$Overall>=70]<-'C'
raw$Grade[raw$Overall<79.5&raw$Overall>=77.5]<-'C+'
raw$Grade[raw$Overall<82&raw$Overall>=79.5]<-'B-'
raw$Grade[raw$Overall<86&raw$Overall>=82]<-'B'
raw$Grade[raw$Overall<88&raw$Overall>=86]<-'B+'
raw$Grade[raw$Overall<90&raw$Overall>=88]<-'A-'
raw$Grade[raw$Overall<95&raw$Overall>=90]<-'A'
raw$Grade[raw$Overall<=100&raw$Overall>=95]<-'A+'
head(raw)
#Export structure
sink(file='../output/summary-cleanscores.txt')
str(raw)
sink()
#Export summary
needed_data <- raw[,17:22]
filenames<-c("Test1-stats.txt",
"Test2-stats.txt",
"Homework-stats.txt",
"Quiz-stats.txt",
"Lab-stats.txt",
"Overall-stats.txt")
for(i in 1:6){
sink(file = paste("../output/",filenames[i]))
print(summary_stats(needed_data[,i]))
print(print_stats(needed_data[,i]))
sink()
}
#Export clean data frame
write.csv(raw,file='../data/cleandata/cleanscores.csv')
table(raw$Grade)
rownames(table(raw$Grade))
table(raw$Grade,row.names==c("A+","A","A-","B+","B","B-","C+","C","C-","D","F")
rownames(table(raw$Grade))
table(raw$Grade,levels=c("A+","A","A-","B+","B","B-","C+","C","C-","D","F")
table(raw$Grade,levels=c("A+","A","A-","B+","B","B-","C+","C","C-","D","F")
table(raw$Grade,levels=c("A+","A","A-","B+","B","B-","C+","C","C-","D","F"))
table(raw$Grade)
frame <- table(Grade=raw$Grade)
prop.table(raw$Grade)
frame
library(shiny); runApp('C:/Users/user/Desktop/app123.R')
runApp('C:/Users/user/Desktop/app123.R')
prop.table(raw$Grade)
table(raw$Grade)
str(frame)
frame
sum(frame[2])
sum(frame[[2]])
sum(frame[,2])
sum(frame[2,])
frame <- as.list(table(Grade=raw$Grade))
frame
str(frame)
sum(frame)
frame <- table(Grade=raw$Grade)
frame
frame[[1:11]]
frame[[1]]
sum(frame)
frame/sum(frame)
round(frame/sum(frame),digits = 2)
frame <- table(Grade=raw$Grade)
frame <- mutate(frame,Prop=round(frame/sum(frame),digits = 2))
frame <- cbind(frame,Prop=round(frame/sum(frame),digits = 2))
frame
frame <- cbind(Grade=frame,Prop=round(frame/sum(frame),digits = 2))
frame
frame <- cbind(frame,Prop=round(frame/sum(frame),digits = 2))
frame
frame <- table(Grade=raw$Grade)
frame <- cbind(frame,Prop=round(frame/sum(frame),digits = 2))
frame
?colnames
colnames(frame) <- c("Grade","Freq","Prop")
frame
frame <- table(Grade=raw$Grade)
row.names(frame)
Grade <- row.names(frame)
frame <- table(Grade=raw$Grade)
frame
row.names(frame) <- NULL
frame
frame <- table(raw$Grade)
Grade <- row.names(frame)
row.names(frame) <- NULL
Freq <- frame
frame <- cbind(Grade = Grade,Freq = Freq,Prop=round(frame/sum(frame),digits = 2))
frame
runApp('C:/Users/user/Desktop/app123.R')
runApp('C:/Users/user/Desktop/app123.R')
datasetInput <- reactive({
switch(input$var1,
"HW1" = raw$HW1,
"HW2" = raw$HW2,
'HW3' = raw$HW3,
'HW4' = raw$HW4,
'HW5' = raw$HW5,
'HW6' = raw$HW6,
'HW7' = raw$HW7,
'HW8' = raw$HW8,
'HW9' = raw$HW9,
'Att' = raw$ATT,
'QZ1' = raw$QZ1,
'QZ2' = raw$QZ2,
'QZ3' = raw$QZ3,
'QZ4' = raw$QZ4,
'EX1' = raw$EX1,
'EX2' = raw$EX2,
'Test1' = raw$Test1,
'Test2' = raw$Test2,
'Homework' = raw$Homework,
'Quiz' = raw$Quiz,
'Lab' = raw$Lab,
'Overall' = raw$Overall
)
})
runApp('C:/Users/user/Desktop/app123.R')
runApp('C:/Users/user/Desktop/app123.R')
runApp('C:/Users/user/Desktop/app123.R')
runApp('C:/Users/user/Desktop/app123.R')
runApp('C:/Users/user/Desktop/app123.R')
runApp('C:/Users/user/Desktop/app123.R')
runApp('C:/Users/user/Desktop/app123.R')
print_stats(value)
output$summary <- renderPrint({
value <- input[[raw$var1]]
print_stats(value)
})
runApp('C:/Users/user/Desktop/app123.R')
runApp('C:/Users/user/Desktop/app123.R')
runApp('C:/Users/user/Desktop/app123.R')
runApp('C:/Users/user/Desktop/app123.R')
runApp('C:/Users/user/Desktop/app123.R')
cor(raw$HW1,raw$HW2)
runApp('C:/Users/user/Desktop/app123.R')
runApp('C:/Users/user/Desktop/app123.R')
datasetInput <- reactive({
switch(input$var1,
"HW1" = raw$HW1,
"HW2" = raw$HW2,
'HW3' = raw$HW3,
'HW4' = raw$HW4,
'HW5' = raw$HW5,
'HW6' = raw$HW6,
'HW7' = raw$HW7,
'HW8' = raw$HW8,
'HW9' = raw$HW9,
'Att' = raw$ATT,
'QZ1' = raw$QZ1,
'QZ2' = raw$QZ2,
'QZ3' = raw$QZ3,
'QZ4' = raw$QZ4,
'EX1' = raw$EX1,
'EX2' = raw$EX2,
'Test1' = raw$Test1,
'Test2' = raw$Test2,
'Homework' = raw$Homework,
'Quiz' = raw$Quiz,
'Lab' = raw$Lab,
'Overall' = raw$Overall
)
})
output$summary <- renderPrint({
print_stats(datasetInput())
})
runApp('C:/Users/user/Desktop/app123.R')
runApp('C:/Users/user/Desktop/app123.R')
runApp('C:/Users/user/Desktop/app123.R')
runApp('C:/Users/user/Desktop/app123.R')
runApp('C:/Users/user/Desktop/app123.R')
runApp('C:/Users/user/Desktop/app123.R')
runApp('C:/Users/user/Desktop/app123.R')
runApp('C:/Users/user/Desktop/app123.R')
runApp('C:/Users/user/Desktop/app123.R')
runApp('C:/Users/user/Desktop/app123.R')
cat(cor(raw$HW1,raw$HW2))
cor(raw$HW1,raw$HW2)
cat(cor(raw$HW1,raw$HW2))
runApp('C:/Users/user/Desktop/app123.R')
runApp('C:/Users/user/Desktop/app123.R')
runApp('C:/Users/user/Desktop/app123.R')
runApp('C:/Users/user/Desktop/app123.R')
runApp('C:/Users/user/Desktop/app123.R')
runApp('C:/Users/user/Desktop/app123.R')
runApp('C:/Users/user/Desktop/app123.R')
>layer_smooths()
?layer_smooths
runApp('C:/Users/user/Desktop/app123.R')
runApp('C:/Users/user/Desktop/app123.R')
runApp('C:/Users/user/Desktop/app123.R')
runApp('C:/Users/user/Desktop/app123.R')
